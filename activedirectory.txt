package com.scb.axessspringboottraining.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.scb.axessspringboottraining.config.APISuccessPayload;
import com.scb.axessspringboottraining.entity.ActiveDirectory;
import com.scb.axessspringboottraining.entity.File;
import com.scb.axessspringboottraining.entity.FolderPath;
import com.scb.axessspringboottraining.entity.User;
import com.scb.axessspringboottraining.service.ActiveDirectoryService;
import com.scb.axessspringboottraining.service.FolderPathService;
import com.scb.axessspringboottraining.service.UserService;

@CrossOrigin(origins="*")
@RestController
@RequestMapping("/api/activeDirectory/")

public class ActiveDirectoryController {
	
	@Autowired
	ActiveDirectoryService activeDirectoryService;
	
	@Autowired
	UserService userService;
	
	@Autowired
	FolderPathService folderPathService;
	
	@PostMapping
	public ResponseEntity<APISuccessPayload> addNewActiveDirectory(@RequestBody ActiveDirectory activeDirectory) {
		ActiveDirectory newActiveDirectory=activeDirectoryService.addActiveDirectory(activeDirectory);
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		aPISuccessPayload.setBody(newActiveDirectory);
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
		aPISuccessPayload.setMessage("Active Directory Created");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
		return response;
		
	}
	@GetMapping
	public ResponseEntity<APISuccessPayload> getAllActiveDirectorys(){
		List<ActiveDirectory> list = activeDirectoryService.getAllActiveDirectorys();
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		aPISuccessPayload.setBody(list);
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
		aPISuccessPayload.setMessage("Active Directories Found");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;
	}
	
	@GetMapping("{id}")
	public ResponseEntity<APISuccessPayload> getActiveDirectoryById(@PathVariable Long id){
		ActiveDirectory found = activeDirectoryService.getActiveDirectoryById(id);
		ResponseEntity<APISuccessPayload> response;
		if(found != null) {
			APISuccessPayload payload = APISuccessPayload.build(found, "Active Directory Found", HttpStatus.OK);
			response = new ResponseEntity<APISuccessPayload>(payload,HttpStatus.OK);
		}
		else {
			APISuccessPayload payload = APISuccessPayload.build(found, "Active Directory doesn't exist", HttpStatus.NOT_FOUND);
			response = new ResponseEntity<APISuccessPayload>(payload,HttpStatus.OK);
		}
        return response;
	}
	
	@DeleteMapping("{id}")
	public ResponseEntity<APISuccessPayload> deleteActiveDirectoryById(@PathVariable Long id){
//		User found = userService.getUserById(id);
		boolean deleted = activeDirectoryService.deleteById(id);
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		aPISuccessPayload.setBody(deleted);
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
		aPISuccessPayload.setMessage("File successfully Deleted");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;
	}
//	@PutMapping("{id}")
//	public ResponseEntity<ActiveDirectory> updateActiveDirectoryById(@RequestBody ActiveDirectory ad, @PathVariable Long id){
//		return new ResponseEntity<ActiveDirectory>(activeDirectoryService.updateActiveDirectory(ad, id), HttpStatus.OK);
//	}
	@PutMapping("changeStatus/{id}")
	public ResponseEntity<APISuccessPayload> changeStatusById(@PathVariable Long id){
		ActiveDirectory newActiveDirectory = activeDirectoryService.changeStatusById(id);
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		aPISuccessPayload.setBody(newActiveDirectory);
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
		aPISuccessPayload.setMessage("Active Directory found and status updated");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;
	}
	
	@PutMapping("update/{id}")
	public ResponseEntity<APISuccessPayload> updateActiveDirectoryById(@RequestBody ActiveDirectory ad, @PathVariable Long id){
		ActiveDirectory newActiveDirectory = activeDirectoryService.updateActiveDirectory(ad, id);
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		aPISuccessPayload.setBody(newActiveDirectory);
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
		aPISuccessPayload.setMessage("Active Directory found and updated");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;
	}

	@GetMapping("user/{userId}/activeDirectories")
    public ResponseEntity<APISuccessPayload> getActiveDirectoriesBycategory(@PathVariable Long userId){
        
		User user= userService.getUserById(userId);
        if(user!=null) {
        	List<ActiveDirectory> list = activeDirectoryService.getAllByUser(user);
    		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
    		aPISuccessPayload.setBody(list);
    		aPISuccessPayload.setStatus(200);
    		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
    		aPISuccessPayload.setSuccess(true);
    		aPISuccessPayload.setException(false);
    		if(list.isEmpty()==false)aPISuccessPayload.setMessage("Active Directories for the required user Found");
    		else aPISuccessPayload.setMessage("Active Directories for the required user doesn't exist");
    		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
            return response;
        }else {
        	List<ActiveDirectory> list = Collections.EMPTY_LIST;
        	APISuccessPayload aPISuccessPayload= new APISuccessPayload();
    		aPISuccessPayload.setBody(list);
    		aPISuccessPayload.setStatus(200);
    		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
    		aPISuccessPayload.setSuccess(true);
    		aPISuccessPayload.setException(false);
    		aPISuccessPayload.setMessage("Required user doesn't exist");
    		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
            return response;
        }
    }	
	@GetMapping("folderPath/folderPathId}/activeDirectories")
    public ResponseEntity<APISuccessPayload> getActiveDirectoriesByFolderPath(@PathVariable Long folderPathId){
        
		FolderPath folderPath= folderPathService.getFolderPathById(folderPathId);
        if(folderPath!=null) {
        	List<ActiveDirectory> list = activeDirectoryService.getAllByFolderPath(folderPath);
    		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
    		aPISuccessPayload.setBody(list);
    		aPISuccessPayload.setStatus(200);
    		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
    		aPISuccessPayload.setSuccess(true);
    		aPISuccessPayload.setException(false);
    		aPISuccessPayload.setMessage("Active Directories for the required folder path Found");
    		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
            return response;
        }else {
        	List<ActiveDirectory> list = Collections.EMPTY_LIST;
        	APISuccessPayload aPISuccessPayload= new APISuccessPayload();
    		aPISuccessPayload.setBody(list);
    		aPISuccessPayload.setStatus(200);
    		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
    		aPISuccessPayload.setSuccess(true);
    		aPISuccessPayload.setException(false);
    		aPISuccessPayload.setMessage("Required folder path doesn't exist");
    		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
            return response;
        }
    }
}

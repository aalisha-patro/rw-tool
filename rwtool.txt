import React from 'react';
import { ListItem, ListItemIcon, ListItemText } from '@mui/material';
import InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile';

function File({ name }) {
  return (
    <ListItem>
      <ListItemIcon>
        <InsertDriveFileIcon />
      </ListItemIcon>
      <ListItemText primary={name} />
    </ListItem>
  );
}

export default File;

[
  {
    "id": 1,
    "name": "Transaction.txt",
    "folderIds": [1],
    "isFavorite": false,
    "dateUploaded": "17/08/2023",
    "type": ".txt"
  },
  {
    "id": 2,
    "name": "Transaction.txt",
    "folderIds": [1],
    "isFavorite": false,
    "dateUploaded": "16/08/2023",
    "type": ".txt"
  },
  {
    "id": 3,
    "name": "Transaction.txt",
    "folderIds": [1],
    "isFavorite": false,
    "dateUploaded": "15/08/2023",
    "type": ".txt"
  },
  {
    "id": 4,
    "name": "Transaction.txt",
    "folderIds": [1],
    "isFavorite": false,
    "dateUploaded": "14/08/2023",
    "type": ".txt"
  },
  {
    "id": 5,
    "name": "Transaction.txt",
    "folderIds": [1],
    "isFavorite": false,
    "dateUploaded": "13/08/2023",
    "type": ".txt"
  },
  {
    "id": 6,
    "name": "Transaction.txt",
    "folderIds": [1],
    "isFavorite": false,
    "dateUploaded": "12/08/2023",
    "type": ".txt"
  },
  {
    "id": 7,
    "name": "Transaction.txt",
    "folderIds": [1],
    "isFavorite": false,
    "dateUploaded": "11/08/2023",
    "type": ".txt"
  },
  {
    "id": 8,
    "name": "Transaction.txt",
    "folderIds": [1],
    "isFavorite": false,
    "dateUploaded": "10/08/2023",
    "type": ".txt"
  },
  {
    "id": 9,
    "name": "Transaction.txt",
    "folderIds": [1],
    "isFavorite": false,
    "dateUploaded": "09/08/2023",
    "type": ".txt"
  },
  {
    "id": 10,
    "name": "Transaction.txt",
    "folderIds": [1],
    "isFavorite": false,
    "dateUploaded": "08/08/2023",
    "type": ".txt"
  },
  {
    "id": 11,
    "name": "Account Balances.txt",
    "folderIds": [2],
    "isFavorite": false,
    "dateUploaded": "17/08/2023",
    "type": ".txt"
  },
  {
    "id": 12,
    "name": "Account Balances.txt",
    "folderIds": [2],
    "isFavorite": false,
    "dateUploaded": "16/08/2023",
    "type": ".txt"
  },
  {
    "id": 13,
    "name": "Account Balances.txt",
    "folderIds": [2],
    "isFavorite": false,
    "dateUploaded": "15/08/2023",
    "type": ".txt"
  },
  {
    "id": 14,
    "name": "Account Balances.txt",
    "folderIds": [2],
    "isFavorite": false,
    "dateUploaded": "14/08/2023",
    "type": ".txt"
  },
  {
    "id": 15,
    "name": "Account Balances.txt",
    "folderIds": [2],
    "isFavorite": false,
    "dateUploaded": "13/08/2023",
    "type": ".txt"
  },
  {
    "id": 16,
    "name": "Account Balances.txt",
    "folderIds": [2],
    "isFavorite": false,
    "dateUploaded": "12/08/2023",
    "type": ".txt"
  },
  {
    "id": 17,
    "name": "Account Balances.txt",
    "folderIds": [2],
    "isFavorite": false,
    "dateUploaded": "11/08/2023",
    "type": ".txt"
  },
  {
    "id": 18,
    "name": "Account Balances.txt",
    "folderIds": [2],
    "isFavorite": false,
    "dateUploaded": "10/08/2023",
    "type": ".txt"
  },
  {
    "id": 19,
    "name": "Account Balances.txt",
    "folderIds": [2],
    "isFavorite": false,
    "dateUploaded": "09/08/2023",
    "type": ".txt"
  },
  {
    "id": 20,
    "name": "Account Balances.txt",
    "folderIds": [2],
    "isFavorite": false,
    "dateUploaded": "08/08/2023",
    "type": ".txt"
  },
  {
    "id": 21,
    "name": "LoanCredit.txt",
    "folderIds": [3],
    "isFavorite": false,
    "dateUploaded": "17/08/2023",
    "type": ".txt"
  },
  {
    "id": 22,
    "name": "LoanCredit.txt",
    "folderIds": [3],
    "isFavorite": false,
    "dateUploaded": "16/08/2023",
    "type": ".txt"
  },
  {
    "id": 23,
    "name": "LoanCredit.txt",
    "folderIds": [3],
    "isFavorite": false,
    "dateUploaded": "15/08/2023",
    "type": ".txt"
  },
  {
    "id": 24,
    "name": "LoanCredit.txt",
    "folderIds": [3],
    "isFavorite": false,
    "dateUploaded": "14/08/2023",
    "type": ".txt"
  },
  {
    "id": 25,
    "name": "LoanCredit.txt",
    "folderIds": [3],
    "isFavorite": false,
    "dateUploaded": "13/08/2023",
    "type": ".txt"
  },
  {
    "id": 26,
    "name": "LoanCredit.txt",
    "folderIds": [3],
    "isFavorite": false,
    "dateUploaded": "12/08/2023",
    "type": ".txt"
  },
  {
    "id": 27,
    "name": "LoanCredit.txt",
    "folderIds": [3],
    "isFavorite": false,
    "dateUploaded": "11/08/2023",
    "type": ".txt"
  },
  {
    "id": 28,
    "name": "LoanCredit.txt",
    "folderIds": [3],
    "isFavorite": false,
    "dateUploaded": "10/08/2023",
    "type": ".txt"
  },
  {
    "id": 29,
    "name": "LoanCredit.txt",
    "folderIds": [3],
    "isFavorite": false,
    "dateUploaded": "09/08/2023",
    "type": ".txt"
  },
  {
    "id": 30,
    "name": "LoanCredit.txt",
    "folderIds": [3],
    "isFavorite": false,
    "dateUploaded": "08/08/2023",
    "type": ".txt"
  },
  {
    "id": 31,
    "name": "CustomerStatements.txt",
    "folderIds": [4],
    "isFavorite": false,
    "dateUploaded": "17/08/2023",
    "type": ".txt"
  },
  {
    "id": 32,
    "name": "CustomerStatements.txt",
    "folderIds": [4],
    "isFavorite": false,
    "dateUploaded": "16/08/2023",
    "type": ".txt"
  },
  {
    "id": 33,
    "name": "CustomerStatements.txt",
    "folderIds": [4],
    "isFavorite": false,
    "dateUploaded": "15/08/2023",
    "type": ".txt"
  },
  {
    "id": 34,
    "name": "CustomerStatements.txt",
    "folderIds": [4],
    "isFavorite": false,
    "dateUploaded": "14/08/2023",
    "type": ".txt"
  },
  {
    "id": 35,
    "name": "CustomerStatements.txt",
    "folderIds": [4],
    "isFavorite": false,
    "dateUploaded": "13/08/2023",
    "type": ".txt"
  },
  {
    "id": 36,
    "name": "RiskAssessment.txt",
    "folderIds": [5],
    "isFavorite": false,
    "dateUploaded": "12/08/2023",
    "type": ".txt"
  },
  {
    "id": 37,
    "name": "RiskAssessment.txt",
    "folderIds": [5],
    "isFavorite": false,
    "dateUploaded": "11/08/2023",
    "type": ".txt"
  },
  {
    "id": 38,
    "name": "RiskAssessment.txt",
    "folderIds": [5],
    "isFavorite": false,
    "dateUploaded": "10/08/2023",
    "type": ".txt"
  },
  {
    "id": 39,
    "name": "RiskAssessment.txt",
    "folderIds": [5],
    "isFavorite": false,
    "dateUploaded": "09/08/2023",
    "type": ".txt"
  },
  {
    "id": 40,
    "name": "RiskAssessment.txt",
    "folderIds": [5],
    "isFavorite": false,
    "dateUploaded": "08/08/2023",
    "type": ".txt"
  },
  {
    "id": 41,
    "name": "RiskAssessment.txt",
    "folderIds": [5],
    "isFavorite": false,
    "dateUploaded": "07/08/2023",
    "type": ".txt"
  },
  {
    "id": 43,
    "name": "AuditTrail.txt",
    "folderIds": [6],
    "isFavorite": false,
    "dateUploaded": "15/08/2023",
    "type": ".txt"
  },
  {
    "id": 44,
    "name": "RAuditTrail.txt",
    "folderIds": [6],
    "isFavorite": false,
    "dateUploaded": "14/08/2023",
    "type": ".txt"
  },
   {
     "id": 45,
     "name": "AuditTrail.txt",
     "folderIds": [6],
     "isFavorite": false,
     "dateUploaded": "13/08/2023",
     "type": ".txt"
   },
   {
     "id": 46,
     "name": "AuditTrail.txt",
     "folderIds": [6],
     "isFavorite": false,
     "dateUploaded": "12/08/2023",
     "type": ".txt"
   },
   {
     "id": 47,
     "name": "AuditTrail.txt",
     "folderIds": [5],
     "isFavorite": false,
     "dateUploaded": "11/08/2023",
     "type": ".txt"
   }
   
]

import React from "react";
import { ListItem, ListItemText } from "@mui/material";

function Folder({ name, onClick, clickedFolderId, folderId }) {
  return (
    <ListItem
      className={clickedFolderId === folderId ? "clicked-folder" : ""}
      button
      onClick={onClick}
    >
      <ListItemText primary={name} />
    </ListItem>
  );
}

export default Folder;

[
  { "id": 1, "name": "Transaction Reports" },
  { "id": 2, "name": "Account Balances" },
  { "id": 3, "name": "Loan and Credit Reports" },
  { "id": 4, "name": "Customer Statements" },
  { "id": 5, "name": "Risk Assessment Reports" },
  { "id": 6, "name": "Audit Trail Reports" },
  { "id": 7, "name": "Complaince Reports" },
  { "id": 8, "name": "Interest Calculation Reports" },
  { "id": 9, "name": "ATM/Cash Dispenser Reports" }
 
]
import './dashboard.css';
import 'bootstrap/dist/css/bootstrap.min.css';

function Footer(){
    return(
        <footer class="footer" style={{}}>
			    <div class="container-fluid">
				  <div class="footer-in">
                    <p class="mb-0"> &#169; Standard Chartered 2023. All rights reserved.</p>
                  </div>
				</div>
		</footer>
    );
}

export default Footer;

import React, { useState } from "react";
import { Navbar, Container, Nav } from "react-bootstrap";
import logo from "./logo1.png";
import AccountCircleIcon from "@mui/icons-material/AccountCircle";
import NotificationsIcon from "@mui/icons-material/Notifications";
import Menu from "@mui/material/Menu";
import MenuItem from "@mui/material/MenuItem";
import { Notifications } from "@material-ui/icons";
import { IconButton, Tooltip, Badge } from "@mui/material";

const CustomNavbar = (props) => {
  let {
    onFolderClick,
    clickedFolderId,
    setClickedFolderId,
    handleFolderClick,
  } = props;
  const [profileAnchorEl, setProfileAnchorEl] = useState(null);
  const [notificationAnchorEl, setNotificationAnchorEl] = useState(null);

  const handleProfileClick = (event) => {
    setProfileAnchorEl(event.currentTarget);
  };

  const handleNotificationClick = (event) => {
    setNotificationAnchorEl(event.currentTarget);
  };

  const handleProfileClose = () => {
    setProfileAnchorEl(null);
  };

  const handleNotificationClose = () => {
    setNotificationAnchorEl(null);
  };

  const ITEM_HEIGHT = 48;

  const [anchorElNotifications, setanchorElNotifications] =
    React.useState(null);

  const handleOpenNotificationMenu = (event) => {
    setanchorElNotifications(event.currentTarget);
  };

  const handleCloseNotificationMenu = () => {
    setanchorElNotifications(null);
  };
  return (
    <Navbar
      style={{
        backgroundColor: "#0075b0",
        paddingTop: "3px",
        paddingBottom: "3px",
      }}
      variant="dark"
      expand="lg"
    >
      <Container>
        <Navbar.Brand style={{ display: "flex", alignItems: "center" }}>
          <Nav.Link href="#">
            <img
              src={logo}
              alt="Standard Chartered Logo"
              style={{ width: "110px", marginRight: "10px" }}
            />
          </Nav.Link>
          <h4 style={{ marginBottom: "0px", marginLeft: "20px" }}>
            Welcome, User
          </h4>
        </Navbar.Brand>
        <Navbar.Toggle aria-controls="navbar-nav" />
        <Navbar.Collapse id="navbar-nav">
          <Nav className="me-auto">
            {/* Nav.Link elements for the old links are removed */}
          </Nav>
          <div className="d-flex align-items-center">
            <IconButton
              style={{ marginRight: "20px" }}
              onClick={handleOpenNotificationMenu}
              sx={{ p: 0 }}
            >
              <Badge badgeContent={2} color="success">
                <Notifications style={{ color: "white" }} />
              </Badge>
            </IconButton>

            <AccountCircleIcon
              style={{
                fontSize: 24,
                color: "white",
                cursor: "pointer",
              }}
              onClick={handleProfileClick}
            />

            {/* Profile Dropdown Menu */}
            <Menu
              anchorEl={profileAnchorEl}
              open={Boolean(profileAnchorEl)}
              onClose={handleProfileClose}
              anchorOrigin={{ vertical: "bottom", horizontal: "center" }}
              transformOrigin={{ vertical: "top", horizontal: "center" }}
            >
              <MenuItem onClick={handleProfileClose}>Profile Settings</MenuItem>
              <MenuItem onClick={handleProfileClose}>Logout</MenuItem>
            </Menu>

            <Menu
              id="long-menu"
              MenuListProps={{
                "aria-labelledby": "long-button",
              }}
              anchorOrigin={{
                vertical: "top",

                horizontal: "right",
              }}
              keepMounted
              transformOrigin={{
                vertical: "top",

                horizontal: "right",
              }}
              sx={{ mt: "45px" }}
              anchorEl={anchorElNotifications}
              open={Boolean(anchorElNotifications)}
              onClose={handleCloseNotificationMenu}
              PaperProps={{
                style: {
                  maxHeight: ITEM_HEIGHT * 4.5,

                  width: "50",
                },
              }}
            >
              <MenuItem onClick={() => handleFolderClick(1)}>
                File added in Transaction Reports
              </MenuItem>
              <MenuItem onClick={() => handleFolderClick(4)}>
                File added in Customer Statements
              </MenuItem>
            </Menu>
          </div>
        </Navbar.Collapse>
      </Container>
    </Navbar>
  );
};

export default CustomNavbar;
import {
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Stack,
  TablePagination,
} from "@mui/material";
import React, { useState } from "react";
import CompanyLogo from "./CompanyLogo";
import Folder from "./Folder";
import folderData from "./folders.json";
import { InputAdornment, Pagination, PaginationItem } from "@mui/material";
import Paper from "@mui/material/Paper";
import FolderIcon from "@mui/icons-material/Folder";

// const FOLDERS_PER_PAGE = 5;

function LeftSection({
  folders,
  onFolderClick,
  onPageChange,
  totalPages,
  currentPage,
  foldersPerPage,
  clickedFolderId,
  setClickedFolderId,
  handleFolderClick,
}) {
  // // const handlePageChange = (page) => {
  // //   setCurrentPage(page);
  // // };

  // const startIndex = (currentPage - 1) * FOLDERS_PER_PAGE;
  // const visibleFolders = folders.slice(startIndex, startIndex + FOLDERS_PER_PAGE);
  return (
    <div className="left-section">
      {/* <CompanyLogo /> */}
      <List className="folder-list">
        {folders.map((folder) => (
          <ListItem key={folder.id}>
            <FolderIcon />
            <Folder
              folderId={folder.id}
              clickedFolderId={clickedFolderId}
              name={folder.name}
              onClick={() => handleFolderClick(folder.id)}
              style={{ color: "#0066b2" }}
            />
          </ListItem>
        ))}
      </List>
      {/* <div className="pagination">
        {Array.from({ length: totalPages }, (_, index) => (
          <button
            key={index}
            onClick={() => handlePageChange(index + 1)}
            className={currentPage === index + 1 ? 'active' : ''}
          >
            {index + 1}
          </button>
        ))}
      </div> */}
      <Pagination
        style={{ position: "absolute", bottom: -50 }}
        count={totalPages}
        page={currentPage}
        onChange={onPageChange}
        defaultPage={currentPage}
        siblingCount={0}
        boundaryCount={1}
      />
    </div>
  );
}

export default LeftSection;

import React, { useState } from "react";
import File from "./File";
import TextField from "@mui/material/TextField";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";
import FavoriteIcon from "@mui/icons-material/Favorite";
import IconButton from "@mui/material/IconButton";
import Grid from "@mui/material/Grid";
import DownloadIcon from "@mui/icons-material/CloudDownload";
import {
  ButtonGroup,
  InputAdornment,
  Pagination,
  PaginationItem,
  TablePagination,
  Tooltip,
} from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import filesData from "./files.json";
import MenuItem from "@mui/material/MenuItem";
import Button from "@mui/material/Button";
import Select from "@mui/material/Select";
import { DateRangePicker } from "@mui/lab";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import DownloadForOfflineIcon from "@mui/icons-material/DownloadForOffline";

function MiddleSection({
  files,
  onToggleFavorite,
  onDownloadFiles,
  onFileClick,
}) {
  const itemsPerPage = 5;
  const [page, setPage] = useState(1);

  const [showFilters, setShowFilters] = useState(false);
  const [selectedFileType, setSelectedFileType] = useState("ALL");
  const [selectedDateRange, setSelectedDateRange] = useState([null, null]);
  const [searchTerm, setSearchTerm] = useState("");

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleFileTypeChange = (event) => {
    setSelectedFileType(event.target.value);
  };

  const handleDateRangeChange = (newValue) => {
    setSelectedDateRange(newValue);
  };
  const handleSearchTermChange = (event) => {
    setSearchTerm(event.target.value);
  };

  const filteredFiles = files
    .filter((file) => {
      if (searchTerm === "") {
        return true;
      }

      file.name.toLowerCase().includes(searchTerm.toLowerCase());
    })
    .filter((file) => {
      if (selectedFileType === "ALL") {
        return true; // No filter applied
      }
      return file.type === selectedFileType;
    })
    .filter((file) => {
      const uploadDate = new Date(file.uploadDate);
      const startDate = selectedDateRange[0];
      const endDate = selectedDateRange[1];

      if (!startDate || !endDate) {
        return true; // No filter applied
      }

      return uploadDate >= startDate && uploadDate <= endDate;
    });

  const pageCount = Math.ceil(filteredFiles.length / itemsPerPage);
  const startIndex = (page - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const visibleFiles = filteredFiles.slice(startIndex, endIndex);

  const [open, setOpen] = useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <div className="middle-section">
      {/* <Grid container spacing={2} alignItems="center">
        <Grid item xs={12}> */}
      <TextField
        style={{ marginTop: "20 px" }}
        placeholder="Search files..."
        variant="outlined"
        fullWidth
        size="small"
        value={searchTerm}
        onChange={handleSearchTermChange}
        //{(e) => setSearchTerm(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <SearchIcon />
            </InputAdornment>
          ),
        }}
        InputLabelProps={{ shrink: true }}
      />
      {/* </Grid>
      </Grid> */}
      <div
        style={{
          display: "flex",
          alignItems: "center",
          justifyContent: "end",
          marginTop: "8px",
          marginBottom: "8px",
        }}
      >
        <Button size="small" onClick={handleClickOpen}>
          Filter By Date
          <Dialog
            open={open}
            onClose={handleClose}
            aria-labelledby="alert-dialog-title"
            aria-describedby="alert-dialog-description"
          >
            <DialogTitle id="alert-dialog-title">
              {"Filter by date"}
            </DialogTitle>
            <DialogContent>
              <form style={{ display: "flex", alignItems: "center" }}>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <label htmlFor="startDate">Start Date</label>
                  <input
                    style={{ padding: "3px", marginLeft: "1px" }}
                    type="date"
                    name="startDate"
                    id="startDate"
                  />
                </div>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <label style={{ marginLeft: "20px" }} htmlFor="startDate">
                    End Date
                  </label>
                  <input
                    style={{ padding: "3px", marginLeft: "1px" }}
                    type="date"
                    name="endDate"
                    id="endDate"
                  />
                </div>
              </form>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleClose}>Cancel</Button>
              <Button onClick={handleClose} autoFocus>
                Submit
              </Button>
            </DialogActions>
          </Dialog>
        </Button>

        <div>
          <Select
            value={selectedFileType}
            onChange={handleFileTypeChange}
            style={{ height: "30px" }}
          >
            <MenuItem value="ALL">All</MenuItem>
            <MenuItem value="PDF">PDF</MenuItem>
            <MenuItem value="Word">Word</MenuItem>
          </Select>

          <Dialog
            open={open}
            onClose={handleClose}
            aria-labelledby="alert-dialog-title"
            aria-describedby="alert-dialog-description"
          >
            <DialogTitle id="alert-dialog-title">
              {"Filter by date"}
            </DialogTitle>
            <DialogContent>
              <form style={{ display: "flex", alignItems: "center" }}>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <label htmlFor="startDate">Start Date</label>
                  <input
                    style={{ padding: "3px", marginLeft: "1px" }}
                    type="date"
                    name="startDate"
                    id="startDate"
                  />
                </div>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <label style={{ marginLeft: "20px" }} htmlFor="startDate">
                    End Date
                  </label>
                  <input
                    style={{ padding: "3px", marginLeft: "1px" }}
                    type="date"
                    name="endDate"
                    id="endDate"
                  />
                </div>
              </form>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleClose}>Cancel</Button>
              <Button onClick={handleClose} autoFocus>
                Submit
              </Button>
            </DialogActions>
          </Dialog>
        </div>
        <Tooltip title="Download all files">
          <IconButton>
            <DownloadForOfflineIcon />
          </IconButton>
        </Tooltip>
      </div>
      <TableContainer component={Paper}>
        <Table stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Date Uploaded</TableCell>
              <TableCell>Type</TableCell>
              <TableCell>Favorite</TableCell>
              <TableCell>Download</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {visibleFiles.map((file) => (
              <TableRow key={file.id}>
                <TableCell>
                  <span
                    className="clickable-file"
                    onClick={() => onFileClick(file)}
                  >
                    {file.name}
                  </span>
                </TableCell>
                <TableCell>{file.dateUploaded}</TableCell>
                <TableCell>{file.type}</TableCell>
                <TableCell>
                  <Tooltip title="Add to Favorite">
                    <IconButton onClick={() => onToggleFavorite(file)}>
                      {file.isFavorite ? (
                        <FavoriteIcon style={{ color: "green" }} />
                      ) : (
                        <FavoriteIcon />
                      )}
                    </IconButton>
                  </Tooltip>
                </TableCell>
                <TableCell>
                  <Tooltip title="Download File">
                    <IconButton onClick={() => onDownloadFiles(file)}>
                      <DownloadIcon />
                    </IconButton>
                  </Tooltip>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <Pagination
        style={{ display: "flex", justifyContent: "center" }}
        count={pageCount}
        page={page}
        onChange={handleChangePage}
        renderItem={(item) => <PaginationItem component={Button} {...item} />}
      />
    </div>
  );
}

export default MiddleSection;

import * as React from 'react';
import { styled, alpha } from '@mui/material/styles';
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Toolbar from '@mui/material/Toolbar';
import IconButton from '@mui/material/IconButton';
import Typography from '@mui/material/Typography';
import InputBase from '@mui/material/InputBase';
import Badge from '@mui/material/Badge';
import MenuItem from '@mui/material/MenuItem';
import Menu from '@mui/material/Menu';
import MenuIcon from '@mui/icons-material/Menu';
import SearchIcon from '@mui/icons-material/Search';
import AccountCircle from '@mui/icons-material/AccountCircle';
import MailIcon from '@mui/icons-material/Mail';
import NotificationsIcon from '@mui/icons-material/Notifications';
import MoreIcon from '@mui/icons-material/MoreVert';

const Search = styled('div')(({ theme }) => ({
  position: 'relative',
  borderRadius: theme.shape.borderRadius,
  backgroundColor: alpha(theme.palette.common.white, 0.15),
  '&:hover': {
    backgroundColor: alpha(theme.palette.common.white, 0.25),
  },
  marginRight: theme.spacing(2),
  marginLeft: 0,
  width: '100%',
  [theme.breakpoints.up('sm')]: {
    marginLeft: theme.spacing(3),
    width: 'auto',
  },
}));

const SearchIconWrapper = styled('div')(({ theme }) => ({
  padding: theme.spacing(0, 2),
  height: '100%',
  position: 'absolute',
  pointerEvents: 'none',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
}));

const StyledInputBase = styled(InputBase)(({ theme }) => ({
  color: 'inherit',
  '& .MuiInputBase-input': {
    padding: theme.spacing(1, 1, 1, 0),
    // vertical padding + font size from searchIcon
    paddingLeft: `calc(1em + ${theme.spacing(4)})`,
    transition: theme.transitions.create('width'),
    width: '100%',
    [theme.breakpoints.up('md')]: {
      width: '20ch',
    },
  },
}));

export default function SearchAppBar() {
  const [anchorEl, setAnchorEl] = React.useState(null);
  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);

  const isMenuOpen = Boolean(anchorEl);
  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);

  const handleProfileMenuOpen = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleMobileMenuClose = () => {
    setMobileMoreAnchorEl(null);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    handleMobileMenuClose();
  };

  const handleMobileMenuOpen = (event) => {
    setMobileMoreAnchorEl(event.currentTarget);
  };

  const menuId = 'primary-search-account-menu';
  const renderMenu = (
    <Menu
      anchorEl={anchorEl}
      anchorOrigin={{
        vertical: 'top',
        horizontal: 'right',
      }}
      id={menuId}
      keepMounted
      transformOrigin={{
        vertical: 'top',
        horizontal: 'right',
      }}
      open={isMenuOpen}
      onClose={handleMenuClose}
    >
      <MenuItem onClick={handleMenuClose}>Profile</MenuItem>
      <MenuItem onClick={handleMenuClose}>My account</MenuItem>
    </Menu>
  );

  const mobileMenuId = 'primary-search-account-menu-mobile';
  const renderMobileMenu = (
    <Menu
      anchorEl={mobileMoreAnchorEl}
      anchorOrigin={{
        vertical: 'top',
        horizontal: 'right',
      }}
      id={mobileMenuId}
      keepMounted
      transformOrigin={{
        vertical: 'top',
        horizontal: 'right',
      }}
      open={isMobileMenuOpen}
      onClose={handleMobileMenuClose}
    >
      <MenuItem>
        <IconButton size="large" aria-label="show 4 new mails" color="inherit">
          <Badge badgeContent={4} color="error">
            <MailIcon />
          </Badge>
        </IconButton>
        <p>Messages</p>
      </MenuItem>
      <MenuItem>
        <IconButton
          size="large"
          aria-label="show 17 new notifications"
          color="inherit"
        >
          <Badge badgeContent={17} color="error">
            <NotificationsIcon />
          </Badge>
        </IconButton>
        <p>Notifications</p>
      </MenuItem>
      <MenuItem onClick={handleProfileMenuOpen}>
        <IconButton
          size="large"
          aria-label="account of current user"
          aria-controls="primary-search-account-menu"
          aria-haspopup="true"
          color="inherit"
        >
          <AccountCircle />
        </IconButton>
        <p>Profile</p>
      </MenuItem>
    </Menu>
  );

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static">
        <Toolbar>
          <IconButton
            size="large"
            edge="start"
            color="inherit"
            aria-label="open drawer"
            sx={{ mr: 2 }}
          >
            <MenuIcon />
          </IconButton>
          <Typography
            variant="h6"
            noWrap
            component="div"
            sx={{ display: { xs: 'none', sm: 'block' } }}
          >
            MUI
          </Typography>
          <Search>
            <SearchIconWrapper>
              <SearchIcon />
            </SearchIconWrapper>
            <StyledInputBase
              placeholder="Search…"
              inputProps={{ 'aria-label': 'search' }}
            />
          </Search>
          <Box sx={{ flexGrow: 1 }} />
          <Box sx={{ display: { xs: 'none', md: 'flex' } }}>
            <IconButton size="large" aria-label="show 4 new mails" color="inherit">
              <Badge badgeContent={4} color="error">
                <MailIcon />
              </Badge>
            </IconButton>
            <IconButton
              size="large"
              aria-label="show 17 new notifications"
              color="inherit"
            >
              <Badge badgeContent={17} color="error">
                <NotificationsIcon />
              </Badge>
            </IconButton>
            <IconButton
              size="large"
              edge="end"
              aria-label="account of current user"
              aria-controls={menuId}
              aria-haspopup="true"
              onClick={handleProfileMenuOpen}
              color="inherit"
            >
              <AccountCircle />
            </IconButton>
          </Box>
          <Box sx={{ display: { xs: 'flex', md: 'none' } }}>
            <IconButton
              size="large"
              aria-label="show more"
              aria-controls={mobileMenuId}
              aria-haspopup="true"
              onClick={handleMobileMenuOpen}
              color="inherit"
            >
              <MoreIcon />
            </IconButton>
          </Box>
        </Toolbar>
      </AppBar>
      {renderMobileMenu}
      {renderMenu}
    </Box>
  );
}

import React, { useState } from "react";
import {
  IconButton,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Pagination,
} from "@mui/material";
import NotificationsIcon from "@mui/icons-material/Notifications";
import AccountCircleIcon from "@mui/icons-material/AccountCircle";
import FavoriteIcon from "@mui/icons-material/Favorite";
import FileCopyIcon from "@mui/icons-material/FileCopy";
import AccessTimeIcon from "@mui/icons-material/AccessTime";
import TopBar from "./TopBar";

function RightSection({ favoriteFiles, recentFiles, downloadedFiles }) {
  const [currentPageFav, setcurrentPageFav] = useState(1);
  const [currentPageRecent, setcurrentPageRecent] = useState(1);
  const [currentPageDownload, setcurrentPageDownload] = useState(1);
  const perPage = 2;
  const favoriteFilesPages = Math.ceil(favoriteFiles.length / perPage);
  const recentFilesPages = Math.ceil(recentFiles.length / perPage);
  const downloadedFilesPages = Math.ceil(downloadedFiles.length / perPage);

  const handlePageChangeFav = (event, page) => {
    setcurrentPageFav(page);
  };
  const handlePageChangeRecent = (event, page) => {
    setcurrentPageRecent(page);
  };
  const handlePageChangeDownload = (event, page) => {
    setcurrentPageDownload(page);
  };

  return (
    <div className="right-section">
      {/* <TopBar/> */}
      <hr />
      <div className="file-sections">
        <List>
          {/* Favorites Section */}
          <div
            className={`${favoriteFiles.length > 0 ? "pagination-height" : ""}`}
          >
            <ListItem>
              <ListItemIcon>
                <FavoriteIcon style={{ color: "#03C03C" }} />
              </ListItemIcon>
              <ListItemText
                primary="Favorite Files"
                style={{ color: "#03C03C" }}
              />
            </ListItem>
            {favoriteFiles.length > 0 && (
              <>
                {favoriteFiles
                  .slice(
                    (currentPageFav - 1) * perPage,
                    currentPageFav * perPage
                  )
                  .map((file) => (
                    <ListItem key={file.id} style={{ color: "#0066b2" }}>
                      <ListItemIcon>
                        <FileCopyIcon style={{ color: "#0066b2" }} />
                      </ListItemIcon>
                      <ListItemText primary={file.name} />
                    </ListItem>
                  ))}
                {/* <Pagination
                  style={{ position: 'absolute', bottom: '137px', left: '80px' }}
                /> */}
                <Pagination
                  style={{
                    position: "absolute",
                    top: "160px",
                  }}
                  count={favoriteFilesPages}
                  defaultPage={1}
                  siblingCount={0}
                  onChange={handlePageChangeFav}
                />
              </>
            )}
          </div>
          <hr />
          {/* Recent Files Section */}
          <div
            className={`${recentFiles.length > 0 ? "pagination-height" : ""}`}
          >
            <ListItem>
              <ListItemIcon>
                <AccessTimeIcon style={{ color: "#03C03C" }} />
              </ListItemIcon>
              <ListItemText
                primary="Recent Files"
                style={{ color: "#03C03C" }}
              />
            </ListItem>
            {recentFiles.length > 0 && (
              <>
                {recentFiles
                  .slice(
                    (currentPageRecent - 1) * perPage,
                    currentPageRecent * perPage
                  )
                  .map((file) => (
                    <ListItem key={file.id} style={{ color: "#0066b2" }}>
                      <ListItemIcon>
                        <FileCopyIcon style={{ color: "#0066b2" }} />
                      </ListItemIcon>
                      <ListItemText primary={file.name} />
                    </ListItem>
                  ))}
                <Pagination
                  style={{}}
                  count={recentFilesPages}
                  defaultPage={1}
                  siblingCount={0}
                  onChange={handlePageChangeRecent}
                />
              </>
            )}
          </div>
          <hr />

          {/* Downloaded Files Section */}
          <div
            className={`${
              downloadedFiles.length > 0 ? "pagination-height" : ""
            }`}
          >
            <ListItem>
              <ListItemIcon>
                <FileCopyIcon style={{ color: "#03C03C" }} />
              </ListItemIcon>
              <ListItemText
                primary="Downloaded Files"
                style={{ color: "#03C03C" }}
              />
            </ListItem>
            {downloadedFiles.length > 0 && (
              <>
                {downloadedFiles
                  .slice(
                    (currentPageDownload - 1) * perPage,
                    currentPageDownload * perPage
                  )
                  .map((file) => (
                    <ListItem key={file.id} style={{ color: "#0066b2" }}>
                      <ListItemIcon>
                        <FileCopyIcon style={{ color: "#0066b2" }} />
                      </ListItemIcon>
                      <ListItemText primary={file.name} />
                    </ListItem>
                  ))}
                <Pagination
                  style={{
                    position: "absolute",
                    bottom: "10px",
                  }}
                  count={downloadedFilesPages}
                  defaultPage={1}
                  siblingCount={0}
                  onChange={handlePageChangeDownload}
                />
              </>
            )}
          </div>
        </List>
      </div>
    </div>
  );
}

export default RightSection;

import React from 'react';
import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import NotificationsIcon from '@mui/icons-material/Notifications';
import AccountCircleIcon from '@mui/icons-material/AccountCircle';
import Grid from '@mui/material/Grid';

function TopBar() {
  return (
    <AppBar position="static">
      <Toolbar>
        
        <Grid container alignItems="center" spacing={2}>
          <Grid item>
            <IconButton color="inherit">
              <NotificationsIcon />
            </IconButton>
          </Grid>
          <Grid item>
            <IconButton color="inherit">
              <AccountCircleIcon />
            </IconButton>
          </Grid>
        </Grid>
      </Toolbar>
    </AppBar>
  );
}

export default TopBar;




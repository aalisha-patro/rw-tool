import React, { useState } from "react";
import File from "./File";
import TextField from "@mui/material/TextField";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";
import FavoriteIcon from "@mui/icons-material/Favorite";
import IconButton from "@mui/material/IconButton";
import Grid from "@mui/material/Grid";
import DownloadIcon from "@mui/icons-material/CloudDownload";
import {
  ButtonGroup,
  InputAdornment,
  Pagination,
  PaginationItem,
  TablePagination,
  Tooltip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Breadcrumbs,
  Typography,
} from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import filesData from "./files.json";
import MenuItem from "@mui/material/MenuItem";
import Button from "@mui/material/Button";
import Select from "@mui/material/Select";
import { DateRangePicker } from "@mui/lab";
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import DownloadForOfflineIcon from "@mui/icons-material/DownloadForOffline";

function MiddleSection({
  files,
  onToggleFavorite,
  onDownloadFiles,
  onFileClick,
  clickedFileBreadcrumbs,

}) {
  const itemsPerPage = 5;
  const [page, setPage] = useState(1);

  const [showFilters, setShowFilters] = useState(false);
  const [selectedFileType, setSelectedFileType] = useState("ALL");
  const [selectedDateRange, setSelectedDateRange] = useState([null, null]);
  const [searchTerm, setSearchTerm] = useState("");

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleFileTypeChange = (event) => {
    setSelectedFileType(event.target.value);
  };

  const handleDateRangeChange = (newValue) => {
    setSelectedDateRange(newValue);
  };
  const handleSearchTermChange = (event) => {
    setSearchTerm(event.target.value);
  };

  const filteredFiles = files
    .filter((file) => {
      if (searchTerm === "") {
        return true;
      }

      file.name.toLowerCase().includes(searchTerm.toLowerCase());
    })
    .filter((file) => {
      if (selectedFileType === "ALL") {
        return true; // No filter applied
      }
      return file.type === selectedFileType;
    })
    .filter((file) => {
      const uploadDate = new Date(file.uploadDate);
      const startDate = selectedDateRange[0];
      const endDate = selectedDateRange[1];

      if (!startDate || !endDate) {
        return true; // No filter applied
      }

      return uploadDate >= startDate && uploadDate <= endDate;
    });

  const pageCount = Math.ceil(filteredFiles.length / itemsPerPage);
  const startIndex = (page - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const visibleFiles = filteredFiles.slice(startIndex, endIndex);

  const [open, setOpen] = useState(false);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  return (
    <div className="middle-section">
      {/* <Grid container spacing={2} alignItems="center">
        <Grid item xs={12}> */}
      <TextField
        style={{ marginTop: "20 px" }}
        placeholder="Search files..."
        variant="outlined"
        fullWidth
        size="small"
        value={searchTerm}
        onChange={handleSearchTermChange}
        //{(e) => setSearchTerm(e.target.value)}
        InputProps={{
          startAdornment: (
            <InputAdornment position="start">
              <SearchIcon />
            </InputAdornment>
          ),
        }}
        InputLabelProps={{ shrink: true }}
      />
      {/* </Grid>
      </Grid> */}
        <div>
      {clickedFileBreadcrumbs && (
        <Breadcrumbs aria-label="breadcrumb">
          {Object.entries(clickedFileBreadcrumbs).map(([fileId, breadcrumb], index) => (
            <Typography key={index} color="textPrimary">
              {breadcrumb}
            </Typography>
          ))}
        </Breadcrumbs>
      )}
    </div>
      <div
        style={{
          display: "flex",
          alignItems: "center",
          justifyContent: "end",
          marginTop: "8px",
          marginBottom: "8px",
        }}
      >
        <Button size="small" onClick={handleClickOpen}>
          Filter By Date
          <Dialog
            open={open}
            onClose={handleClose}
            aria-labelledby="alert-dialog-title"
            aria-describedby="alert-dialog-description"
          >
            <DialogTitle id="alert-dialog-title">
              {"Filter by date"}
            </DialogTitle>
            <DialogContent>
              <form style={{ display: "flex", alignItems: "center" }}>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <label htmlFor="startDate">Start Date</label>
                  <input
                    style={{ padding: "3px", marginLeft: "1px" }}
                    type="date"
                    name="startDate"
                    id="startDate"
                  />
                </div>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <label style={{ marginLeft: "20px" }} htmlFor="startDate">
                    End Date
                  </label>
                  <input
                    style={{ padding: "3px", marginLeft: "1px" }}
                    type="date"
                    name="endDate"
                    id="endDate"
                  />
                </div>
              </form>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleClose}>Cancel</Button>
              <Button onClick={handleClose} autoFocus>
                Submit
              </Button>
            </DialogActions>
          </Dialog>
        </Button>

        <div>
          <Select
            value={selectedFileType}
            onChange={handleFileTypeChange}
            style={{ height: "30px" }}
          >
            <MenuItem value="ALL">All</MenuItem>
            <MenuItem value="PDF">PDF</MenuItem>
            <MenuItem value="Word">Word</MenuItem>
          </Select>

          <Dialog
            open={open}
            onClose={handleClose}
            aria-labelledby="alert-dialog-title"
            aria-describedby="alert-dialog-description"
          >
            <DialogTitle id="alert-dialog-title">
              {"Filter by date"}
            </DialogTitle>
            <DialogContent>
              <form style={{ display: "flex", alignItems: "center" }}>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <label htmlFor="startDate">Start Date</label>
                  <input
                    style={{ padding: "3px", marginLeft: "1px" }}
                    type="date"
                    name="startDate"
                    id="startDate"
                  />
                </div>
                <div style={{ display: "flex", alignItems: "center" }}>
                  <label style={{ marginLeft: "20px" }} htmlFor="startDate">
                    End Date
                  </label>
                  <input
                    style={{ padding: "3px", marginLeft: "1px" }}
                    type="date"
                    name="endDate"
                    id="endDate"
                  />
                </div>
              </form>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleClose}>Cancel</Button>
              <Button onClick={handleClose} autoFocus>
                Submit
              </Button>
            </DialogActions>
          </Dialog>
        </div>
        <Tooltip title="Download all files">
          <IconButton>
            <DownloadForOfflineIcon />
          </IconButton>
        </Tooltip>
      </div>
      <TableContainer component={Paper}>
        <Table stickyHeader>
          <TableHead>
            <TableRow>
              <TableCell>Name</TableCell>
              <TableCell>Date Uploaded</TableCell>
              <TableCell>Type</TableCell>
              <TableCell>Favorite</TableCell>
              <TableCell>Download</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {visibleFiles.map((file) => (
              <TableRow key={file.id}>
                <TableCell>
                  <span
                    className="clickable-file"
                    onClick={() => onFileClick(file)}
                  >
                    {file.name}
                  </span>
                </TableCell>
                <TableCell>{file.dateUploaded}</TableCell>
                <TableCell>{file.type}</TableCell>
                <TableCell>
                  <Tooltip title="Add to Favorite">
                    <IconButton onClick={() => onToggleFavorite(file)}>
                      {file.isFavorite ? (
                        <FavoriteIcon style={{ color: "green" }} />
                      ) : (
                        <FavoriteIcon />
                      )}
                    </IconButton>
                  </Tooltip>
                </TableCell>
                <TableCell>
                  <Tooltip title="Download File">
                    <IconButton onClick={() => onDownloadFiles(file)}>
                      <DownloadIcon />
                    </IconButton>
                  </Tooltip>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <Pagination
        style={{ display: "flex", justifyContent: "center" }}
        count={pageCount}
        page={page}
        onChange={handleChangePage}
        renderItem={(item) => <PaginationItem component={Button} {...item} />}
      />
    </div>
  );
}

export default MiddleSection;

// import React, { useState } from 'react';
// import File from './File';
// import TextField from '@mui/material/TextField';
// import Table from '@mui/material/Table';
// import TableBody from '@mui/material/TableBody';
// import TableCell from '@mui/material/TableCell';
// import TableContainer from '@mui/material/TableContainer';
// import TableHead from '@mui/material/TableHead';
// import TableRow from '@mui/material/TableRow';
// import Paper from '@mui/material/Paper';
// import FavoriteIcon from '@mui/icons-material/Favorite';
// import IconButton from '@mui/material/IconButton';
// import Grid from '@mui/material/Grid';
// import DownloadIcon from '@mui/icons-material/CloudDownload';
// import { InputAdornment } from '@mui/material';
// import SearchIcon from '@mui/icons-material/Search';
// import filesData from './files.json'

// function MiddleSection({ onToggleFavorite,onDownloadFiles,onFileClick,selectedFolder }) {
//   const [searchTerm, setSearchTerm] = useState('');

//   // const filteredFiles = filesData.filter(file =>
//   //   file.name.toLowerCase().includes(searchTerm.toLowerCase())
//   // );
//   const filteredFiles = selectedFolder
//   ? filesData.filter(file=>file.folderIds.includes(selectedFolder))
//   : filesData.filter(file =>
//        file.name.toLowerCase().includes(searchTerm.toLowerCase()));

//   return (
//     <div className="middle-section">
//       {/* <Grid container spacing={2} alignItems="center">
//         <Grid item xs={12}> */}
//           <TextField
//           style={{marginTop : "20 px"}}
//             placeholder="Search files..."
//             variant="outlined"
//             fullWidth
//             size='small'
//             value={searchTerm}
//             onChange={(e) => setSearchTerm(e.target.value)}
//             InputProps={{
//               startAdornment:(
//                 <InputAdornment position='start'>
//                   <SearchIcon />
//                 </InputAdornment>
//               ),
//             }}
//             InputLabelProps={{shrink: true}}
//           />
//         {/* </Grid>
//       </Grid> */}
//       <TableContainer component={Paper}>
//         <Table stickyHeader>
//           <TableHead>
//             <TableRow>
//               <TableCell>Name</TableCell>
//               <TableCell>Date Uploaded</TableCell>
//               <TableCell>Type</TableCell>
//               <TableCell>Favorite</TableCell>
//               <TableCell>Download</TableCell>
//             </TableRow>
//           </TableHead>
//           <TableBody>
//             {filteredFiles.map(file => (
//               <TableRow key={file.id}>
//                 <TableCell>
//                   <span
//                   className='clickable-file'
//                   onClick={()=>onFileClick(file)}>{file.name}</span>
//                 </TableCell>
//                 <TableCell>{file.uploadDate}</TableCell>
//                 <TableCell>{file.type}</TableCell>
//                 <TableCell>
//                   <IconButton onClick={()=>onToggleFavorite(file)}>
//                     {file.isFavorite ? <FavoriteIcon color="secondary" /> : <FavoriteIcon />}
//                   </IconButton>
//                 </TableCell>
//                 <TableCell>
//                   <IconButton onClick={()=> onDownloadFiles(file)}>
//                     <DownloadIcon/>
//                   </IconButton>
//                 </TableCell>
//               </TableRow>
//             ))}
//           </TableBody>
//         </Table>
//       </TableContainer>
//     </div>
//   );
// }

// export default MiddleSection;

import React, { useState } from "react";

import LeftSection from "./components/LeftSection";

import MiddleSection from "./components/MiddleSection";

import RightSection from "./components/RightSection";

import Grid from "@mui/material/Grid";

import "./App.css";

import folderData from "./components/folders.json";

import filesData from "./components/files.json";

import Header from "./components/Header";

import Footer from "./components/footer";




function App() {

  const [files, setFiles] = useState([]);
  const [selectedFolder, setSelectedFolder] = useState(null);




  const [favoriteFiles, setFavoriteFiles] = useState([]);

  const [downloadFiles, setDownloadFiles] = useState([]);

  const [recentFiles, setRecentFiles] = useState([]);
  const[clickedFileBreadcrumbs,setClickedFileBreadCrumbs] = useState([]);




  const handleToggleFavorite = (file) => {

    if (file.isFavorite) {

      file.isFavorite = false;




      setFavoriteFiles((favoriteFiles) =>

        favoriteFiles.filter((fav) => fav.id !== file.id)

      );

    } else {

      file.isFavorite = true;




      setFavoriteFiles((favoriteFiles) => [...favoriteFiles, file]);

    }




    setFiles((prevFiles) =>

      prevFiles.map((f) =>

        f.id === file.id ? { ...f, isFavorite: !f.isFavorite } : f

      )

    );

  };

  const handlePageChange = (event, page) => {

    setCurrentPage(page);

  };




  const handleDownloadFile = (file) => {

    setDownloadFiles((prevDownloaded) => [...prevDownloaded, file]);

  };

  const handleFileClick = (file) => {

    const MAX_RECENT_FILES = 5;




    if (!recentFiles.some((recentFiles) => recentFiles.id === file.id)) {

      const updatedRecentFiles = [

        file,

        ...recentFiles.slice(0, MAX_RECENT_FILES - 1),

      ];

      setRecentFiles(updatedRecentFiles);

    }

    setClickedFileBreadCrumbs((prevState)=>({
      ...prevState,[file.id]:file.path,
    }));
  };




  const [currentPage, setCurrentPage] = useState(1);

  const foldersPerPage = 5;

  const totalPages = Math.ceil(folderData.length / foldersPerPage);

  const filteredFiles = selectedFolder

    ? filesData.filter((file) => file.folderIds.includes(selectedFolder))

    : filesData;




  const [clickedFolderId, setClickedFolderId] = useState(1);




  const handleFolderClick = (folderId) => {

    setSelectedFolder(folderId);

    setClickedFolderId(folderId);

  };




  return (

    <div className="app">

      <Header

        handleFolderClick={handleFolderClick}

        clickedFolderId={clickedFolderId}

      />

      <Grid container spacing={2}>

        <Grid item xs={2}>

          <LeftSection

            folders={folderData.slice(

              (currentPage - 1) * foldersPerPage,

              currentPage * foldersPerPage

            )}

            onFolderClick={handleFolderClick}

            currentPage={currentPage}

            totalPages={totalPages}

            foldersPerPage={foldersPerPage}

            onPageChange={handlePageChange}

            handleFolderClick={handleFolderClick}

            clickedFolderId={clickedFolderId}

          />

        </Grid>

        <Grid

          item

          xs={7}

          style={{ padding: "0px", marginTop: "23px", marginBottom: "10px" }}

        >

          <MiddleSection

            files={filteredFiles}

            onToggleFavorite={handleToggleFavorite}

            onDownloadFiles={handleDownloadFile}

            onFileClick={handleFileClick}

            clickedFileBreadcrumbs={clickedFileBreadcrumbs}


          />

        </Grid>

        <Grid item xs={3} style={{ paddingTop: "0px" }}>

          <RightSection

            favoriteFiles={favoriteFiles}

            downloadedFiles={downloadFiles}

            recentFiles={recentFiles}

          />

        </Grid>

      </Grid>

      <Footer />

    </div>

  );

}




export default App;




// import React, { useState } from 'react';

// import LeftSection from './components/LeftSection';

// import MiddleSection from './components/MiddleSection';

// import RightSection from './components/RightSection';

// import Grid from '@mui/material/Grid';

// import './App.css';

// import filesData from './components/files.json';

// import foldersData from './components/folders.json';




// function App() {

//   // const [folders, setFolders] = useState([

//   //   { id: 1, name: 'Folder 1' },

//   //   { id: 2, name: 'Folder 2' },

//   //   // Add more folders as needed

//   // ]);




//   // const [files, setFiles] = useState([

//   //   { id: 1, name: 'File 1.txt', folderId: 2 },

//   //   { id: 2, name: 'File 2.pdf', folderId: 2 },

//   //   // Add more files as needed

//   // ]);




//   const [selectedFolder, setSelectedFolder] = useState(null);

//   const [favoriteFiles, setFavoriteFiles]=useState([]);

//   const [downloadedFiles,setDownloadedFiles] = useState([]);

//   const [recentFiles,setRecentFiles] = useState([]);




//   const handleFolderClick = (folder) => {

//     console.log("folder clicked",folder)

//     setSelectedFolder(folder.Id);

//   };




//   const handleToggleFavorite=(file)=>{

//     if(file.isFavorite){

//       setFavoriteFiles(prevFavorites=>prevFavorites.filter(fav=>fav.id!== file.id));




//     }

//     else{

//       setFavoriteFiles(prevFavorites=>[...prevFavorites,file]);

//     }

//     // setFiles(prevFiles=>

//     //   prevFiles.map(f=>(f.id===file.id?{...f,isFavorite:!f.isFavorite}:f)))

//   }




//   const handleDownloadFile =(filesData)=>{

//     setDownloadedFiles(prevDownloaded=>[...prevDownloaded,filesData])

//   }

//   const handleFileClick = (filesData) => {

//     // Update recentFiles state

//     const MAX_RECENT_FILES = 5; // Adjust the maximum number of recent files as needed




//     // Check if the clicked file is already in the recentFiles array

//     if (!recentFiles.some(recentFile => recentFile.id === filesData.id)) {

//       // Add the clicked file to the beginning of the recentFiles array

//       const updatedRecentFiles = [filesData, ...recentFiles.slice(0, MAX_RECENT_FILES - 1)];

//       setRecentFiles(updatedRecentFiles);

//     }

//   };




//   const filteredFiles = selectedFolder

//   ? filesData.filter(file => {

//     console.log("Selected folders:", selectedFolder);

//     console.log("File folder id:",file.folderIds)




//     return file.folderIds.includes(selectedFolder);}) : filesData;

//   console.log("Filtered files:", filteredFiles);




//   return (

//     <div className="app">

//       <Grid container spacing={2}>

//         <Grid item xs={3}> {/* Left section */}

//           <LeftSection folders={foldersData} onFolderClick={handleFolderClick} />

//         </Grid>

//         <Grid item xs={6}> {/* Middle section */}

//           <MiddleSection

//           selectedFolder={selectedFolder}

//           files={filteredFiles}

//           onToggleFavorite={handleToggleFavorite}

//           onFileClick={handleFileClick}

//           onDownloadFiles={handleDownloadFile} />

//         </Grid>

//         <Grid item xs={3}> {/* Right section */}

//           <RightSection favoriteFiles={favoriteFiles}

//           recentFiles={recentFiles}

//           downloadedFiles={downloadedFiles} />

//         </Grid>

//       </Grid>

//     </div>

//   );

// }




// export default App;





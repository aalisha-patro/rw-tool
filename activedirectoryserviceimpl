package com.scb.axessspringboottraining.serviceImpl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.scb.axessspringboottraining.entity.ActiveDirectory;
import com.scb.axessspringboottraining.entity.FolderPath;
import com.scb.axessspringboottraining.entity.User;
import com.scb.axessspringboottraining.repo.ActiveDirectoryRepository;
import com.scb.axessspringboottraining.service.ActiveDirectoryService;

@Service
public class ActiveDirectoryServiceImpl implements ActiveDirectoryService{

	@Autowired
	private ActiveDirectoryRepository repo;
	
	@Override
	public ActiveDirectory addActiveDirectory(ActiveDirectory ad) {
		return repo.save(ad);
	}

	@Override
	public List<ActiveDirectory> getAllActiveDirectorys() {
		return repo.findAll();
	}

	@Override
	public ActiveDirectory getActiveDirectoryById(Long id) {
		// TODO Auto-generated method stub
		if(repo.findById(id).isPresent())return repo.findById(id).get();
		else return null;
	}

//	@Override
//	public ActiveDirectory updateActiveDirectory(ActiveDirectory ad, Long id) {
//		// TODO Auto-generated method stub
//		ActiveDirectory old = repo.findById(id).get();
//		old.setStatus(ad.getStatus());
//		old.setName(ad.getName());
//		return repo.save(old);
//	}

	@Override
	public ActiveDirectory changeStatusById(Long id) {
		if(repo.findById(id).isPresent()) {
			ActiveDirectory ad = repo.findById(id).get();
			boolean current_status = ((ad.getStatus()).equals("Active"));
			ad.setStatus(!current_status);
			if((ad.getStatus()).equals("Inactive"))ad.setFolderPaths(null);
			return repo.save(ad);
		}
		return null;
	}

	@Override
	public boolean deleteById(Long id) {
		if(repo.findById(id).isPresent()) {
			repo.deleteById(id);
			return true;
		}else return false;
	}

	@Override
	public List<ActiveDirectory> getAllByUser(User user) {
		// TODO Auto-generated method stub
		return repo.getActiveDirectoriesByUsers(user);
	}

	@Override
	public List<ActiveDirectory> getAllByFolderPath(FolderPath folderPath) {
		// TODO Auto-generated method stub
		return repo.getActiveDirectoriesByFolderPaths(folderPath);
	}

	@Override
	public ActiveDirectory updateActiveDirectory(ActiveDirectory ad, Long id) {
		// TODO Auto-generated method stub
		ActiveDirectory old = repo.findById(id).get();
		if(ad.getName()!=null)old.setName(ad.getName());
		if(ad.getStatus()!=null)old.setStatus(ad.getStatus().equals("Active"));
//		old.setUsers(ad.getUsers());
		if(ad.getFolderPaths()!=null)old.setFolderPaths(ad.getFolderPaths());
		if((ad.getStatus()).equals("Inactive"))old.setFolderPaths(null);
		return repo.save(old);
	}

}

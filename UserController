package com.scb.axessspringboottraining.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.scb.axessspringboottraining.config.APISuccessPayload;
import com.scb.axessspringboottraining.entity.ActiveDirectory;
import com.scb.axessspringboottraining.entity.File;
import com.scb.axessspringboottraining.entity.User;
import com.scb.axessspringboottraining.service.ActiveDirectoryService;
import com.scb.axessspringboottraining.service.FileService;
import com.scb.axessspringboottraining.service.UserService;

@CrossOrigin(origins="*")
@RestController
@RequestMapping("/api/user")

public class UserController {
	
	@Autowired
	UserService userService;
	@Autowired
	ActiveDirectoryService activeDirectoryService; 
	@Autowired
	FileService fileService;
	
	@PostMapping
	public ResponseEntity<APISuccessPayload> addNewUser(@RequestBody User user) {
		User newUser=userService.addUser(user);
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		aPISuccessPayload.setBody(newUser);
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
		aPISuccessPayload.setMessage("User Created");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;	
	}
	@GetMapping
	public ResponseEntity<APISuccessPayload> getAllUsers(){
		List<User> list = userService.getAllUsers();
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		aPISuccessPayload.setBody(list);
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
		aPISuccessPayload.setMessage("Users Found");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;
    }
	
	@GetMapping("{id}")
	public ResponseEntity<APISuccessPayload> getUserById(@PathVariable Long id){
		User found = userService.getUserById(id);
		APISuccessPayload payload = APISuccessPayload.build(found, "User Found", HttpStatus.OK);
        ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(payload,HttpStatus.OK);
        return response;
	}
	
	@DeleteMapping("{id}")
	public ResponseEntity<APISuccessPayload> deleteUserById(@PathVariable Long id){
//		User found = userService.getUserById(id);
		boolean deleted = userService.deleteById(id);
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		aPISuccessPayload.setBody(deleted);
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
		aPISuccessPayload.setMessage("User successfully Deleted");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;
	}
	@PutMapping("{id}")
	public ResponseEntity<APISuccessPayload> updateUserById(@RequestBody User user, @PathVariable Long id){
		User newUser = userService.updateUser(user, id);
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		aPISuccessPayload.setBody(newUser);
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
		aPISuccessPayload.setMessage("Users Found");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;
    }
	@PutMapping("{userId}/updateFavorites/{fileId}")
	public ResponseEntity<APISuccessPayload> updateFavoritesById(@PathVariable Long fileId, @PathVariable Long userId){
		File file = fileService.getFileById(fileId);
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		if(file!=null){
			User newUser = userService.addToFavorites(file, userId);
			if(newUser!=null) {aPISuccessPayload.setMessage("File successfully added to favorites");}
			else {aPISuccessPayload.setMessage("File not found");}
		}
		else {
			aPISuccessPayload.setBody(null);
			aPISuccessPayload.setMessage("File not found");
		}
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;
    }
	@PutMapping("{userId}/updateRecents/{fileId}")
	public ResponseEntity<APISuccessPayload> updateRecentsById(@PathVariable Long fileId, @PathVariable Long userId){
		File file = fileService.getFileById(fileId);
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		if(file!=null){
			User newUser = userService.addToRecents(file, userId);
			aPISuccessPayload.setBody(newUser);
			if(newUser!=null) {aPISuccessPayload.setMessage("File successfully added to recents");}
			else {aPISuccessPayload.setMessage("File not found");}
		}
		else {
			aPISuccessPayload.setBody(null);
			aPISuccessPayload.setMessage("File not found");
		}
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
//		aPISuccessPayload.setMessage("Users Found");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;
    }
	@PutMapping("{userId}/updateDownloads/{fileId}")
	public ResponseEntity<APISuccessPayload> updateDownloadsById(@PathVariable Long fileId, @PathVariable Long userId){
		File file = fileService.getFileById(fileId);
		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
		if(file!=null){
			User newUser = userService.addToDownloaded(file, userId);
			aPISuccessPayload.setBody(newUser);
			if(newUser!=null) {aPISuccessPayload.setMessage("File successfully added to downloads");}
			else {aPISuccessPayload.setMessage("File not found");}
		}
		else {
			aPISuccessPayload.setBody(null);
			aPISuccessPayload.setMessage("File not found");
		}
		aPISuccessPayload.setStatus(200);
		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
		aPISuccessPayload.setSuccess(true);
		aPISuccessPayload.setException(false);
//		aPISuccessPayload.setMessage("Users Found");
		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
        return response;
    }
	@GetMapping("{activeDirectoryId}/users")
    public ResponseEntity<APISuccessPayload> getUsersBycategory(@PathVariable Long activeDirectoryId){
        
		ActiveDirectory activeDirectory= activeDirectoryService.getActiveDirectoryById(activeDirectoryId);
        if(activeDirectory!=null) {
        	List<User> list = userService.getAllByActiveDirectory(activeDirectory);
    		APISuccessPayload aPISuccessPayload= new APISuccessPayload();
    		aPISuccessPayload.setBody(list);
    		aPISuccessPayload.setStatus(200);
    		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
    		aPISuccessPayload.setSuccess(true);
    		aPISuccessPayload.setException(false);
    		aPISuccessPayload.setMessage("Users in the required active directory Found");
    		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
            return response;
        }else {
        	List<User> list = Collections.EMPTY_LIST;
        	APISuccessPayload aPISuccessPayload= new APISuccessPayload();
    		aPISuccessPayload.setBody(list);
    		aPISuccessPayload.setStatus(200);
    		aPISuccessPayload.setHttpStatus(String.valueOf(HttpStatus.OK));
    		aPISuccessPayload.setSuccess(true);
    		aPISuccessPayload.setException(false);
    		aPISuccessPayload.setMessage("Required active directory doesn't exist");
    		ResponseEntity<APISuccessPayload> response = new ResponseEntity<APISuccessPayload>(aPISuccessPayload,HttpStatus.OK);
            return response;
        }
    }
//	@PutMapping("{id}")
//	public ResponseEntity<User> changeRoleById(@PathVariable Long id){
//		return new ResponseEntity<User>(userService.changeRoleById(id), HttpStatus.OK);
//	}
}
